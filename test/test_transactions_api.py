"""
    Ledger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""
import unittest
from json import loads

from ledgerclient import ApiException
from ledgerclient.api.transactions_api import TransactionsApi  # noqa: E501
from ledgerclient.model.metadata import Metadata
from ledgerclient.model.posting import Posting
from ledgerclient.model.transaction_data import TransactionData
from ledgerclient.model.transactions import Transactions
from test.test_base import TestBase


class TestTransactionsApi(TestBase):
    """TransactionsApi unit test stubs"""

    def setUp(self):
        super().setUp()
        self.api = TransactionsApi(self.client)  # noqa: E501

    def test_add_metadata_on_transaction(self):
        """Test case for add_metadata_on_transaction

        Set Transaction Metadata  # noqa: E501
        """
        tx = self.api.create_transaction(self.ledger, TransactionData([
            Posting(100, 'USD', 'player1', 'world'),
        ]))
        m = Metadata(foo='bar')
        self.api.add_metadata_on_transaction(self.ledger, tx.data[0].txid, metadata=m)
        getTx = self.api.get_transaction(self.ledger, tx.data[0].txid)
        self.assertEqual('bar', getTx.data.metadata['foo'])

    def test_create_transaction(self):
        """Test case for create_transaction

        Create Transaction  # noqa: E501
        """
        tx = self.api.create_transaction(self.ledger, TransactionData([
            Posting(100, 'USD', 'player1', 'world'),
        ]),)
        self.assertIsNotNone(tx.data[0].timestamp)
        pass

    def test_create_transactions(self):
        """Test case for create_transactions

        Create Transactions Batch  # noqa: E501
        """
        txs = Transactions([
            TransactionData([
                Posting(100, 'USD', 'player1', 'world'),
            ]),
            TransactionData([
                Posting(100, 'USD', 'player2', 'world'),
            ]),
        ])
        self.api.create_transactions(self.ledger, txs)
        txs = self.api.list_transactions(self.ledger)
        self.assertEqual(2, len(txs.cursor.data))

    def test_create_transactions_with_conflict(self):
        """Test case for create_transactions

        Create Transactions Batch  # noqa: E501
        """
        txs = Transactions([
            TransactionData([
                Posting(100, 'USD', 'player1', 'world'),
            ], reference="ref"),
            TransactionData([
                Posting(100, 'USD', 'player2', 'world'),
            ], reference="ref"),
        ])
        try:
            self.api.create_transactions(self.ledger, txs)
            self.fail("should not pass")
        except ApiException as err:
            body = loads(err.body)
            self.assertEqual("CONFLICT", body['data'][1]['errorCode'])

    def test_get_transaction(self):
        """Test case for get_transaction

        Get Transaction  # noqa: E501
        """
        tx = self.api.create_transaction(self.ledger, TransactionData([
            Posting(100, 'USD', 'player1', 'world'),
        ]))
        getTx = self.api.get_transaction(self.ledger, tx.data[0].txid)
        self.assertEqual(tx.data[0].txid, getTx.data.txid)
        pass

    def test_list_transactions(self):
        """Test case for list_transactions

        Get all Transactions  # noqa: E501
        """
        for i in range(0, 3):
            self.api.create_transaction(self.ledger, TransactionData([
                Posting(100, 'USD', 'player{num}'.format(num=i), 'world'),
            ]))

        txs = self.api.list_transactions(self.ledger)
        self.assertEqual(3, len(txs.cursor.data))

    def test_revert_transaction(self):
        """Test case for revert_transaction

        Revert Transaction  # noqa: E501
        """
        tx = self.api.create_transaction(self.ledger, TransactionData([
            Posting(100, 'USD', 'player1', 'world'),
        ]))
        self.api.revert_transaction(self.ledger, tx.data[0].txid)
        pass


if __name__ == '__main__':
    unittest.main()
