"""
    Ledger API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.7.0-beta.1
    Contact: support@numary.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from ledgerclient.api_client import ApiClient, Endpoint as _Endpoint
from ledgerclient.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from ledgerclient.model.create_transaction400_response import CreateTransaction400Response
from ledgerclient.model.create_transaction409_response import CreateTransaction409Response
from ledgerclient.model.create_transactions400_response import CreateTransactions400Response
from ledgerclient.model.get_transaction400_response import GetTransaction400Response
from ledgerclient.model.get_transaction404_response import GetTransaction404Response
from ledgerclient.model.list_accounts400_response import ListAccounts400Response
from ledgerclient.model.list_transactions200_response import ListTransactions200Response
from ledgerclient.model.metadata import Metadata
from ledgerclient.model.transaction_data import TransactionData
from ledgerclient.model.transaction_response import TransactionResponse
from ledgerclient.model.transactions import Transactions
from ledgerclient.model.transactions_response import TransactionsResponse


class TransactionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_metadata_on_transaction_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions/{txid}/metadata',
                'operation_id': 'add_metadata_on_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'txid',
                    'metadata',
                ],
                'required': [
                    'ledger',
                    'txid',
                ],
                'nullable': [
                    'metadata',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'txid':
                        (int,),
                    'metadata':
                        (Metadata,),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'txid': 'txid',
                },
                'location_map': {
                    'ledger': 'path',
                    'txid': 'path',
                    'metadata': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.count_transactions_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions',
                'operation_id': 'count_transactions',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'reference',
                    'account',
                    'source',
                    'destination',
                    'metadata',
                ],
                'required': [
                    'ledger',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'reference':
                        (str,),
                    'account':
                        (str,),
                    'source':
                        (str,),
                    'destination':
                        (str,),
                    'metadata':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'reference': 'reference',
                    'account': 'account',
                    'source': 'source',
                    'destination': 'destination',
                    'metadata': 'metadata',
                },
                'location_map': {
                    'ledger': 'path',
                    'reference': 'query',
                    'account': 'query',
                    'source': 'query',
                    'destination': 'query',
                    'metadata': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions',
                'operation_id': 'create_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'transaction_data',
                    'preview',
                ],
                'required': [
                    'ledger',
                    'transaction_data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'transaction_data':
                        (TransactionData,),
                    'preview':
                        (bool,),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'preview': 'preview',
                },
                'location_map': {
                    'ledger': 'path',
                    'transaction_data': 'body',
                    'preview': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.create_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionsResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions/batch',
                'operation_id': 'create_transactions',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'transactions',
                ],
                'required': [
                    'ledger',
                    'transactions',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'transactions':
                        (Transactions,),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                },
                'location_map': {
                    'ledger': 'path',
                    'transactions': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.get_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions/{txid}',
                'operation_id': 'get_transaction',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'txid',
                ],
                'required': [
                    'ledger',
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'txid':
                        (int,),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'txid': 'txid',
                },
                'location_map': {
                    'ledger': 'path',
                    'txid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (ListTransactions200Response,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions',
                'operation_id': 'list_transactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'page_size',
                    'after',
                    'reference',
                    'account',
                    'source',
                    'destination',
                    'start_time',
                    'end_time',
                    'pagination_token',
                    'metadata',
                ],
                'required': [
                    'ledger',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('page_size',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'page_size':
                        (int,),
                    'after':
                        (str,),
                    'reference':
                        (str,),
                    'account':
                        (str,),
                    'source':
                        (str,),
                    'destination':
                        (str,),
                    'start_time':
                        (str,),
                    'end_time':
                        (str,),
                    'pagination_token':
                        (str,),
                    'metadata':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'page_size': 'page_size',
                    'after': 'after',
                    'reference': 'reference',
                    'account': 'account',
                    'source': 'source',
                    'destination': 'destination',
                    'start_time': 'start_time',
                    'end_time': 'end_time',
                    'pagination_token': 'pagination_token',
                    'metadata': 'metadata',
                },
                'location_map': {
                    'ledger': 'path',
                    'page_size': 'query',
                    'after': 'query',
                    'reference': 'query',
                    'account': 'query',
                    'source': 'query',
                    'destination': 'query',
                    'start_time': 'query',
                    'end_time': 'query',
                    'pagination_token': 'query',
                    'metadata': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.revert_transaction_endpoint = _Endpoint(
            settings={
                'response_type': (TransactionResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/{ledger}/transactions/{txid}/revert',
                'operation_id': 'revert_transaction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ledger',
                    'txid',
                ],
                'required': [
                    'ledger',
                    'txid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ledger':
                        (str,),
                    'txid':
                        (int,),
                },
                'attribute_map': {
                    'ledger': 'ledger',
                    'txid': 'txid',
                },
                'location_map': {
                    'ledger': 'path',
                    'txid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def add_metadata_on_transaction(
        self,
        ledger,
        txid,
        **kwargs
    ):
        """Set the metadata of a transaction by its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_metadata_on_transaction(ledger, txid, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.
            txid (int): Transaction ID.

        Keyword Args:
            metadata (Metadata): metadata. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        kwargs['txid'] = \
            txid
        return self.add_metadata_on_transaction_endpoint.call_with_http_info(**kwargs)

    def count_transactions(
        self,
        ledger,
        **kwargs
    ):
        """Count the transactions from a ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.count_transactions(ledger, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.

        Keyword Args:
            reference (str): Filter transactions by reference field.. [optional]
            account (str): Filter transactions with postings involving given account, either as source or destination.. [optional]
            source (str): Filter transactions with postings involving given account at source.. [optional]
            destination (str): Filter transactions with postings involving given account at destination.. [optional]
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        return self.count_transactions_endpoint.call_with_http_info(**kwargs)

    def create_transaction(
        self,
        ledger,
        transaction_data,
        **kwargs
    ):
        """Create a new transaction to a ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transaction(ledger, transaction_data, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.
            transaction_data (TransactionData):

        Keyword Args:
            preview (bool): Set the preview mode. Preview mode doesn't add the logs to the database or publish a message to the message broker.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        kwargs['transaction_data'] = \
            transaction_data
        return self.create_transaction_endpoint.call_with_http_info(**kwargs)

    def create_transactions(
        self,
        ledger,
        transactions,
        **kwargs
    ):
        """Create a new batch of transactions to a ledger.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_transactions(ledger, transactions, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.
            transactions (Transactions):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        kwargs['transactions'] = \
            transactions
        return self.create_transactions_endpoint.call_with_http_info(**kwargs)

    def get_transaction(
        self,
        ledger,
        txid,
        **kwargs
    ):
        """Get transaction from a ledger by its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transaction(ledger, txid, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.
            txid (int): Transaction ID.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        kwargs['txid'] = \
            txid
        return self.get_transaction_endpoint.call_with_http_info(**kwargs)

    def list_transactions(
        self,
        ledger,
        **kwargs
    ):
        """List transactions from a ledger.  # noqa: E501

        List transactions from a ledger, sorted by txid in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_transactions(ledger, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.

        Keyword Args:
            page_size (int): The maximum number of results to return per page. [optional] if omitted the server will use the default value of 15
            after (str): Pagination cursor, will return transactions after given txid (in descending order).. [optional]
            reference (str): Find transactions by reference field.. [optional]
            account (str): Find transactions with postings involving given account, either as source or destination.. [optional]
            source (str): Find transactions with postings involving given account at source.. [optional]
            destination (str): Find transactions with postings involving given account at destination.. [optional]
            start_time (str): Filter transactions that occurred after this timestamp. The format is RFC3339 and is inclusive (for example, 12:00:01 includes the first second of the minute). . [optional]
            end_time (str): Filter transactions that occurred before this timestamp. The format is RFC3339 and is exclusive (for example, 12:00:01 excludes the first second of the minute). . [optional]
            pagination_token (str): Parameter used in pagination requests. Maximum page size is set to 15. Set to the value of next for the next page of results.  Set to the value of previous for the previous page of results. No other parameters can be set when the pagination token is set. . [optional]
            metadata ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): Filter transactions by metadata key value pairs. Nested objects can be used as seen in the example below.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ListTransactions200Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        return self.list_transactions_endpoint.call_with_http_info(**kwargs)

    def revert_transaction(
        self,
        ledger,
        txid,
        **kwargs
    ):
        """Revert a ledger transaction by its ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revert_transaction(ledger, txid, async_req=True)
        >>> result = thread.get()

        Args:
            ledger (str): Name of the ledger.
            txid (int): Transaction ID.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            TransactionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['ledger'] = \
            ledger
        kwargs['txid'] = \
            txid
        return self.revert_transaction_endpoint.call_with_http_info(**kwargs)

